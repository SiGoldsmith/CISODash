services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cybether-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - cybether-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: cybether-backend
    ports:
      - "5001:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/grc_dashboard
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key-here}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=grc_dashboard
      - CORS_ORIGINS=http://localhost:3000,http://localhost
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cybether-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:14-alpine
    container_name: cybether-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=grc_dashboard
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d grc_dashboard"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cybether-net
    restart: unless-stopped

volumes:
  postgres_data:
    name: cybether-postgres-data

networks:
  cybether-net:
    driver: bridge